# sql_queries.py

import configparser

# CONFIG --this is being done to obtain location of data files; look for config
config = configparser.ConfigParser()
config.read('dwh.cfg')

# compose drop stage tables queries
city_demogrphc_stg_tbl_drop = "DROP TABLE IF EXISTS city_demogrphc_stg;"
port_of_entry_stg_tbl_drop = "DROP TABLE IF EXISTS port_of_entry_stg;"
trans_mode_stg_tbl_drop = "DROP TABLE IF EXISTS trans_mode_stg;"
visa_ctgry_stg_tbl_drop = "DROP TABLE IF EXISTS visa_ctgry_stg;"
cntry_stg_tbl_drop = "DROP TABLE IF EXISTS cntry_stg;"
state_stg_tbl_drop = "DROP TABLE IF EXISTS state_stg;"
city_temp_stg_tbl_drop = "DROP TABLE IF EXISTS city_temp_stg;"
airport_stg_tbl_drop = "DROP TABLE IF EXISTS airport_stg;"
imgrtn_data_stg_tbl_drop = "DROP TABLE IF EXISTS imgrtn_data_stg;"

# compose drop dimension and fact tables queries
city_demogrphc_dim_tbl_drop = "DROP TABLE IF EXISTS city_demogrphc_dim;"
port_of_entry_dim_tbl_drop = "DROP TABLE IF EXISTS port_of_entry_dim;"
trans_mode_dim_tbl_drop = "DROP TABLE IF EXISTS trans_mode_dim;"
visa_ctgry_dim_tbl_drop = "DROP TABLE IF EXISTS visa_ctgry_dim;"
cntry_dim_tbl_drop = "DROP TABLE IF EXISTS cntry_dim;"
state_dim_tbl_drop = "DROP TABLE IF EXISTS state_dim;"
time_period_dim_tbl_drop = "DROP TABLE IF EXISTS time_period_dim;"
city_temp_dim_tbl_drop = "DROP TABLE IF EXISTS city_temp_dim;"
airport_dim_tbl_drop = "DROP TABLE IF EXISTS airport_dim;"
imgrtn_data_fct_tbl_drop = "DROP TABLE IF EXISTS imgrtn_fct;"

city_demogrphc_stg_tbl_create = ("""
    CREATE TABLE IF NOT EXISTS city_demogrphc_stg 
    (
        city TEXT
        ,state_nm TEXT
        ,median_age NUMERIC
        ,male_population INT
        ,female_population INT
        ,total_population INT
        ,number_of_veterans INT
        ,foreign_born INT
        ,avg_household_size NUMERIC
        ,state_cd CHAR(2)
        ,race TEXT
        ,count INT
        --,CONSTRAINT city_demogrphc_stg_pk unique(city, state_nm)
    )
""")

port_of_entry_stg_tbl_create = ("""
    CREATE TABLE IF NOT EXISTS port_of_entry_stg
    (
         port_of_entry_cd CHAR(3) PRIMARY KEY
        ,port_full_nm TEXT
    )
""")

trans_mode_stg_tbl_create = ("""
    CREATE TABLE IF NOT EXISTS trans_mode_stg
    (
         trans_mode_id SMALLINT
        ,trans_mode_nm TEXT
    )
""")

visa_ctgry_stg_tbl_create = ("""
    CREATE TABLE IF NOT EXISTS visa_ctgry_stg
    (
         visa_ctgry_id SMALLINT
        ,visa_ctgry_nm TEXT
    )
""")

cntry_stg_tbl_create = ("""
    CREATE TABLE IF NOT EXISTS cntry_stg
    (
         cntry_id NUMERIC
        ,cntry_nm TEXT
    )
""")

state_stg_tbl_create = ("""
    CREATE TABLE IF NOT EXISTS state_stg
    (
         state_cd CHAR(2)
        ,state_nm TEXT
    )
""")

city_temp_stg_tbl_create = ("""
    CREATE TABLE IF NOT EXISTS city_temp_stg
    (
         temp_dt DATE
        ,avg_temp NUMERIC
        ,avg_temp_uncertainty NUMERIC
        ,city_nm TEXT
        ,cntry_nm TEXT
        ,latitude TEXT
        ,longitude TEXT
        ,CONSTRAINT city_temp_stg_native_pk unique(temp_dt, city_nm, latitude,
                                                    longitude)
    )
""")

airport_stg_tbl_create = ("""
    CREATE TABLE airport_stg
    (
         ident TEXT PRIMARY KEY
        ,type TEXT
        ,name TEXT
        ,elevation_ft NUMERIC
        ,continent TEXT
        ,iso_country TEXT
        ,iso_region TEXT
        ,municipality TEXT
        ,gps_code TEXT
        ,iata_code TEXT
        ,local_code TEXT
        ,coordinates TEXT
    )
""")

imgrtn_data_stg_tbl_create = ("""
    CREATE TABLE IF NOT EXISTS imgrtn_data_stg
    (
        cicid NUMERIC PRIMARY KEY
        ,i94yr NUMERIC
        ,i94mon NUMERIC
        ,i94cit NUMERIC
        ,i94res NUMERIC
        ,i94port TEXT
        ,i94mode NUMERIC
        ,i94addr TEXT
        ,i94bir NUMERIC
        ,i94visa NUMERIC
        ,count NUMERIC
        ,visapost TEXT
        ,occup TEXT
        ,biryear NUMERIC
        ,dtaddto TEXT
        ,gender TEXT
        ,airline TEXT
        ,visatype TEXT
        ,arrvl_dt TEXT
        ,dep_dt TEXT
    )
""")

city_demogrphc_dim_tbl_create = ("""
    CREATE TABLE IF NOT EXISTS city_demogrphc_dim
    (
        city_demogrphc_id INT GENERATED BY DEFAULT AS IDENTITY(1, 1)  PRIMARY KEY
        ,city_nm TEXT
        ,state_nm TEXT
        ,median_age DECIMAL(3,1)
        ,male_pop INT
        ,female_pop INT
        ,total_pop INT
        ,veteran_pop INT
        ,foreign_born_pop INT
        ,avg_hsehld_sz DECIMAL(3,2)
        ,state_cd CHAR(2)
    )
""")

port_of_entry_dim_tbl_create = ("""
    CREATE TABLE IF NOT EXISTS port_of_entry_dim
    (
         port_of_entry_cd CHAR(3) PRIMARY KEY
        ,port_full_nm TEXT
        ,city_nm TEXT
        ,state_cd CHAR(2)
        ,state_nm TEXT
        ,cntry_cd CHAR(2)
        ,cntry_nm TEXT
    )
""")

trans_mode_dim_tbl_create = ("""
    CREATE TABLE IF NOT EXISTS trans_mode_dim
    (
         trans_mode_id SMALLINT PRIMARY KEY
        ,trans_mode_nm TEXT
    )
""")

visa_ctgry_dim_tbl_create = ("""
    CREATE TABLE IF NOT EXISTS visa_ctgry_dim
    (
         visa_ctgry_id SMALLINT PRIMARY KEY
        ,visa_ctgry_nm TEXT
    )
""")

cntry_dim_tbl_create = ("""
    CREATE TABLE IF NOT EXISTS cntry_dim
    (
         cntry_id SMALLINT PRIMARY KEY
        ,cntry_nm TEXT
    )
""")

state_dim_tbl_create = ("""
    CREATE TABLE IF NOT EXISTS state_dim
    (
         state_cd CHAR(2) PRIMARY KEY
        ,state_nm TEXT
 
    )
""")

airport_dim_tbl_create = ("""
    CREATE TABLE IF NOT EXISTS airport_dim
    (
         airport_id INT GENERATED BY DEFAULT AS IDENTITY(1, 1)  PRIMARY KEY
        ,airport_native_id TEXT
        ,type_desc  TEXT
        ,airport_nm TEXT
        ,elevation_ft INT
        ,iso_region_cd TEXT
        ,municipality TEXT
        ,state_cd CHAR(2)
        ,state_nm TEXT
        ,gps_cd TEXT
        ,iata_cd CHAR(3)
        ,local_cd TEXT
        ,longitude NUMERIC
        ,latitude NUMERIC
        ,CONSTRAINT airport_dim_native_pk unique(airport_native_id)
    )
""")

city_temp_dim_tbl_create = ("""
    CREATE TABLE IF NOT EXISTS city_temp_dim
    (
         city_temp_id INT GENERATED BY DEFAULT AS IDENTITY(1, 1)  PRIMARY KEY
        ,yr_mnth INT
        ,avg_temp NUMERIC
        ,avg_temp_uncertainty NUMERIC
        ,city_nm TEXT
        ,cntry_nm TEXT
        ,latitude TEXT
        ,longitude TEXT
        ,CONSTRAINT city_temp_dim_native_pk UNIQUE(yr_mnth, city_nm, latitude, longitude)
    )
""")

time_period_dim_tbl_create = ("""
    CREATE TABLE IF NOT EXISTS time_period_dim
    (
         yr_mnth INT PRIMARY KEY
        ,yr INT
        ,mnth SMALLINT
        ,mnth_shrt_nm CHAR(3)
        ,mnth_lng_nm TEXT
        ,yr_mnth_nm TEXT
        ,qtr SMALLINT
        ,yr_qtr_nm TEXT
    )
""")

imgrtn_data_fct_tbl_create = ("""
    CREATE TABLE IF NOT EXISTS imgrtn_data_fct
    (
        arrvl_yr_mnth INT
        ,ctznshp_cntry_id SMALLINT
        ,resid_cntry_id SMALLINT
        ,port_of_entry_cd CHAR(3)
        ,trans_mode_id SMALLINT
        ,dest_state_cd CHAR(2)
        ,visa_ctgry_id SMALLINT
        ,airport_id INT
        ,city_demogrphc_id INT
        ,city_temp_id INT
        ,imgrnt_cnt INT
    )
""")

                                             
################################################################################
# Compose copy command used to load stage tables. Also, associate each stage
# table with the related source data file.
################################################################################

misc_data_bucket = config['S3']['s3_misc_data']
#imgrtn_data_bucket = config['S3']['imgrtn_data']

iam_role_nm=config['IAM_ROLE']['ARN']

cntry_stg_copy = ("""
    DELETE FROM cntry_stg;
    COPY cntry_stg FROM '{}/{}' iam_role {}
        region 'us-west-2' FORMAT CSV IGNOREHEADER 1;
""").format(misc_data_bucket, config['S3']['country'], iam_role_nm)

port_of_entry_stg_copy = ("""
    DELETE FROM port_of_entry_stg;
    COPY port_of_entry_stg FROM '{}/{}' iam_role {}
        region 'us-west-2' DELIMITER '|' IGNOREHEADER 1;
""").format(misc_data_bucket, config['S3']['port_of_entry'], iam_role_nm)
 
state_stg_copy = ("""
    DELETE FROM state_stg;
    COPY state_stg FROM '{}/{}' iam_role {}
        region 'us-west-2' CSV IGNOREHEADER 1;
""").format(misc_data_bucket, config['S3']['us_state'], iam_role_nm)

trans_mode_stg_copy = ("""
    DELETE FROM trans_mode_stg;
    COPY trans_mode_stg FROM '{}/{}' iam_role {}
        region 'us-west-2' CSV IGNOREHEADER 1;
""").format(misc_data_bucket, config['S3']['transportion_mode'], iam_role_nm)

visa_ctgry_stg_copy = ("""
    DELETE FROM visa_ctgry_stg;
    COPY visa_ctgry_stg FROM '{}/{}' iam_role {}
        region 'us-west-2' CSV IGNOREHEADER 1;
""").format(misc_data_bucket, config['S3']['visa_category'], iam_role_nm)

city_demogrphc_stg_copy = ("""
    DELETE FROM city_demogrphc_stg;
    COPY city_demogrphc_stg FROM '{}/{}' iam_role {}
        region 'us-west-2' DELIMITER ';' IGNOREHEADER 1;
""").format(misc_data_bucket, config['S3']['us_city_demographic'], iam_role_nm)

city_temp_stg_copy = ("""
    DELETE FROM city_temp_stg;
    COPY city_temp_stg FROM '{}/{}' iam_role {}
        region 'us-west-2' CSV IGNOREHEADER 1;
""").format(misc_data_bucket, config['S3']['city_temp'], iam_role_nm)
  
airport_stg_copy = ("""
    DELETE FROM airport_stg;
    COPY airport_stg FROM '{}/{}' iam_role {}
        region 'us-west-2' gzip CSV IGNOREHEADER 1;
""").format(misc_data_bucket, config['S3']['airport'], iam_role_nm)
    
imgrtn_data_stg_copy = ("""
    DELETE FROM imgrtn_data_stg;
    COPY imgrtn_data_stg FROM '{}' iam_role {}
        region 'us-west-2' gzip CSV IGNOREHEADER 1;
""").format(config['S3']['s3_imgrtn_data'], iam_role_nm)


################################################################################
# Compose queries to load target dimension and fact tables.
################################################################################
trans_mode_dim_tbl_load = ("""
    BEGIN TRANSACTION;
    DELETE FROM trans_mode_dim;
    
    INSERT INTO trans_mode_dim (trans_mode_id, trans_mode_nm)
    SELECT trans_mode_id, trans_mode_nm FROM trans_mode_stg
    --
    UNION ALL
    --
    SELECT trans_mode_id, 'Unknown' AS trans_mode_nm
    FROM 
    (
        SELECT COALESCE(i94mode::SMALLINT, 9) AS trans_mode_id 
        FROM imgrtn_data_stg
        --
        EXCEPT
        --
        SELECT trans_mode_id
        FROM trans_mode_stg
        
    ) trans_mode
    ;
    END TRANSACTION;
""")

visa_ctgry_dim_tbl_load = ("""
    BEGIN TRANSACTION;
    DELETE FROM visa_ctgry_dim;
    
    INSERT INTO visa_ctgry_dim (visa_ctgry_id, visa_ctgry_nm)
    SELECT visa_ctgry_id, visa_ctgry_nm FROM visa_ctgry_stg;    
    END TRANSACTION;
""")

cntry_dim_tbl_load = ("""
    BEGIN TRANSACTION;
    DELETE FROM cntry_dim;
    
    INSERT INTO cntry_dim (cntry_id, cntry_nm)
    SELECT cntry_id, cntry_nm FROM cntry_stg;    
    END TRANSACTION;
""")

state_dim_tbl_load = ("""
    BEGIN TRANSACTION;
    DELETE FROM state_dim;
    
    INSERT INTO state_dim(state_cd, state_nm)
    SELECT state_cd, INITCAP(state_nm) FROM state_stg;    
    END TRANSACTION;
""")

port_of_entry_dim_tbl_load = ("""
    BEGIN TRANSACTION;
    DELETE FROM port_of_entry_dim;
    
    INSERT INTO port_of_entry_dim
    (
         port_of_entry_cd
        ,port_full_nm
        ,city_nm
        ,state_cd
        ,state_nm
        ,cntry_nm 
    )
    /***************************************************************************
     * Set default values for port of entry city, state code, state name and
     * country name for the invalid port of entry.
     **************************************************************************/
    SELECT
         port_of_entry_cd
        ,TRIM(TRAILING FROM port_full_nm) port_full_nm
        ,'Unknown' AS city_nm
        ,'99' AS state_cd --this value match code used in table state_dim
        ,'Unknown' AS state_nm
        ,'Unknown' AS cntry_nm
    FROM port_of_entry_stg
    WHERE (
        port_full_nm LIKE 'No PORT Code%'
        OR port_of_entry_cd IN ('XXX', '888')
    )
    --
    UNION ALL
    --
    SELECT port.port_of_entry_cd
        , port.port_full_nm
        , INITCAP(TRIM(CASE
            WHEN port_of_entry_cd = 'TST' THEN 'NEWINGTON'
            WHEN port_of_entry_cd = 'DAB' THEN 'DAYTONA BEACH'
            WHEN port_of_entry_cd = 'BOI' THEN 'BOISE'
            WHEN port_of_entry_cd = 'WRI' THEN 'WRIGHTSOWN'
            WHEN port_of_entry_cd = 'MSP' THEN 'ST PAUL'
            WHEN port_of_entry_cd = 'GRU' THEN 'SAO PAULO'
            WHEN port_of_entry_cd = 'ICT' THEN 'WITCHITA'
            WHEN port_of_entry_cd = 'SSC' THEN 'SUMTER'
            WHEN port_of_entry_cd = 'PUT' THEN 'PUT-IN-BAY'
            WHEN port_of_entry_cd = 'FLX' THEN 'FALLON'
            WHEN port_of_entry_cd = 'PSC' THEN 'PASCO'
            WHEN port_of_entry_cd = 'GSO' THEN 'PIEDMONT'
            WHEN port_of_entry_cd = 'SWB' THEN 'SWANTON'
            WHEN port_of_entry_cd = 'SWB' THEN 'SWANTON'
            WHEN port_of_entry_cd = 'UIO' THEN 'QUITO'
            WHEN port_of_entry_cd = 'LEE' THEN 'LEESBURG'
            WHEN port_of_entry_cd = 'MEX' THEN 'MEXICO CITY'
            WHEN port_of_entry_cd = 'PEX' THEN 'BEIJING'
            WHEN port_of_entry_cd = 'LEE' THEN 'LEESBURG'
            WHEN port_of_entry_cd IN ('APA', 'BDL', 'BLK', 'BTC', 'CDD', 'DAA', 'DPA'
                    , 'DER', 'DLV', 'FOK', 'FOP', 'FPR', 'GTR', 'ICP', 'MOS', 'MSN'
                    , 'MWH', 'ROG', 'RDU', 'SCC', 'SWC', 'SWF', 'VIB', 'VQS', 'WSB'
                    , 'ZZZ') THEN 'Unknown'
            WHEN city_nm LIKE '%AFB%' THEN 'Unknown'
            WHEN city_nm LIKE '%AAF%' THEN 'Unknown'
            WHEN nm_dash_cnt = 0 THEN city_nm
            WHEN nm_dash_cnt = 1 THEN SPLIT_PART(city_nm, '-', 2)
          END)) AS city_nm
        , state.state_cd
        , INITCAP(state.state_nm)
        , INITCAP(CASE
            WHEN port_of_entry_cd = 'MAA' THEN 'United Arab Emirates' 
            WHEN state_or_cntry = 'WASHINGTON #INTL' THEN 'United States'
            WHEN state.state_cd IS NULL AND
                LENGTH(state_or_cntry) > 3 THEN state_or_cntry 
            WHEN state_or_cntry = 'MX' THEN 'MEXICO'
            WHEN state_or_cntry = 'SPN' THEN 'United States'
            WHEN state_or_cntry = 'PRC' THEN 'CHINA'
            ELSE 'United States'
         END) AS cntry_nm
    FROM 
    (
        SELECT
            port.*
            ,REPLACE(REPLACE(
                CASE
                    WHEN nm_comma_cnt = 1 THEN SPLIT_PART(port_full_nm, ',', 1)
                    WHEN nm_comma_cnt = 2 THEN SPLIT_PART(port_full_nm, ',', 1)
                    WHEN nm_comma_cnt = 0 THEN port_full_nm
                END, '#ARPT', ''), 'ARPT', '') AS city_nm
            ,TRIM(CASE
                    WHEN nm_comma_cnt = 1 THEN SPLIT_PART(port_full_nm, ',', 2) 
                    ELSE  SPLIT_PART(port_full_nm, ',', 3) 
                  END) AS state_or_cntry
        FROM 
        (
            -- calculate the number of commas in port full name
            SELECT port.*
                , LENGTH(port_full_nm)
                    - LENGTH(REPLACE(port_full_nm, ',', '')) / LENGTH(',') nm_comma_cnt
            
                , LENGTH(port_full_nm)
                    - LENGTH(REPLACE(port_full_nm, '-', '')) / LENGTH('-') nm_dash_cnt
            FROM
            (
                -- remove trailing spaces from port name
                SELECT
                     port_of_entry_cd
                    , TRIM(TRAILING FROM port_full_nm) port_full_nm
                FROM port_of_entry_stg
                WHERE NOT (
                    port_full_nm LIKE 'No PORT Code%'
                    OR port_full_nm LIKE 'Collapsed%'
                    OR port_of_entry_cd IN ('XXX', '888')
                )
            ) port
        ) port
    ) port
    LEFT JOIN state_stg state
        ON state.state_cd = 
            SUBSTRING(port.state_or_cntry, 1,
                CASE WHEN LENGTH(state_or_cntry) = 2 THEN 2
                     WHEN POSITION(' ' IN port.state_or_cntry) = 0 THEN 1
                     WHEN POSITION(' ' IN port.state_or_cntry) = 3 THEN 2
                     ELSE 1
                END)
    ;
    
    /***************************************************************************
     * add new port codes to table found in immigration data
     **************************************************************************/
    INSERT INTO port_of_entry_dim
    (
         port_of_entry_cd
        ,port_full_nm
        ,city_nm
        ,state_cd
        ,state_nm
        ,cntry_nm 
    )
    SELECT port_of_entry_cd
        ,'Unknown' AS port_full_nm
        ,'Unknown' AS city_nm
        ,'99' AS state_cd
        ,'Unknown' AS state_nm
        ,'Unknown' AS cntry_nm
    FROM 
    (
        SELECT
            CASE
                WHEN i94port = 'FRG' THEN 'FOK'
                WHEN i94port = 'HRL' THEN 'HLG'
                WHEN i94port = 'ISP' THEN 'FOK'
                WHEN i94port = 'JSJ' THEN 'SAJ'
                WHEN i94port = 'BUS' THEN 'BUF'
                WHEN i94port = 'IAG' THEN 'NIA'
                WHEN i94port = 'PHN' THEN 'PHU'
                WHEN i94port = 'STN' THEN 'STR'
                WHEN i94port = 'VMB' THEN 'VNB'
                WHEN i94port = 'T01' THEN 'SEA'
                ELSE i94port
            END AS port_of_entry_cd
        FROM imgrtn_data_stg 
        GROUP BY 1
        --
        EXCEPT
        --
        SELECT port_of_entry_cd
        FROM port_of_entry_dim
        
    ) port
    ;
    END TRANSACTION;
""")

################################################################################
# load city_demogrphc_dim table using data from city_demogrphc_stg. Remove
# duplicate data.
################################################################################

city_demogrphc_dim_tbl_load = ("""
    BEGIN TRANSACTION;
    DELETE FROM city_demogrphc_dim;
    
    /***********************************************************************
     * add a default record to dimension table so that no fact records are
     * dropped with they joined.
     **********************************************************************/
     
    INSERT INTO city_demogrphc_dim
    (
         city_demogrphc_id,
         city_nm, state_nm, median_age, male_pop, female_pop, total_pop,
         veteran_pop, foreign_born_pop, avg_hsehld_sz, state_cd
    )
    VALUES(0, 'Unknown', 'Unknown', 0.0, 0, 0, 0, 0, 0, 0.0, '99');

    /***********************************************************************
     * The source fields except the race and count are duplicate data. Thus,
     * the race and count fields are removed and unique records from the
     * remaining fields are loaded into the dimension table.
     **********************************************************************/
    INSERT INTO city_demogrphc_dim
    (
         city_nm, state_nm, median_age, male_pop, female_pop, total_pop,
         veteran_pop, foreign_born_pop, avg_hsehld_sz, state_cd
    )
    SELECT
         city, state_nm, median_age, male_population, female_population,
         total_population, number_of_veterans, foreign_born,
         avg_household_size, state_cd
    FROM city_demogrphc_stg
    GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10;
    END TRANSACTION;   
""")


################################################################################
# load city_temp_dim table using data from city_temp_stg
city_temp_dim_tbl_load = ("""
    BEGIN TRANSACTION;    
    DELETE FROM city_temp_dim;
    
    /***********************************************************************
     * The code below is used to estimate the temperature for the immigration
     * data month. The average temperature for the previous the three years
     * is used to estimate a given missing month temperature. Only United States
     * cities data is loaded in the final dimension table.
     *
     * Determine the first of the month dates for the dates between
     * 2013-10-01 and 2016-12-01.
     **********************************************************************/
     
    DROP TABLE IF EXISTS data_dt_tmp;
    /***************************************************************************
    * This did not work
    CREATE TEMPORARY TABLE data_dt_tmp
    AS
    (
        SELECT  CAST(ts AS DATE) AS dt
        FROM
        (
            SELECT '2013-09-01'::DATE + (i * interval '1 month') as ts
            FROM generate_series(1,39) i
        ) xyz
    ) 
    ; 
    ***************************************************************************/
    
    CREATE TEMPORARY TABLE data_dt_tmp
    ( 
        dt DATE
    );
    
    INSERT INTO data_dt_tmp (dt) VALUES('2013-10-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2013-11-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2013-12-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2014-01-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2014-02-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2014-03-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2014-04-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2014-05-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2014-06-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2014-07-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2014-08-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2014-09-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2014-10-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2014-11-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2014-12-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2015-01-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2015-02-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2015-03-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2015-04-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2015-05-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2015-06-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2015-07-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2015-08-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2015-09-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2015-10-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2015-11-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2015-12-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2016-01-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2016-02-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2016-03-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2016-04-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2016-05-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2016-06-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2016-07-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2016-08-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2016-09-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2016-10-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2016-11-01');
    INSERT INTO data_dt_tmp (dt) VALUES('2016-12-01');
    
    DROP TABLE IF EXISTS temp_dt_tmp;
    CREATE TEMPORARY TABLE temp_dt_tmp
    AS
    (
        SELECT
            dt AS future_dt
            ,ADD_MONTHS(dt, -12) as historical_dt
        FROM data_dt_tmp
        --
        UNION ALL
        --
        SELECT
            dt AS future_dt
            ,ADD_MONTHS(dt, -24) as historical_dt
        FROM data_dt_tmp
        --
        UNION ALL
        --
        SELECT
            dt AS future_dt
            ,ADD_MONTHS(dt, -36) as historical_dt
        FROM data_dt_tmp
    ) 
    ;

    /***********************************************************************
     * Estimate the temperature for months between 2013-10-01 and 2016-04-01
     * using the previous three year corresponding months temperature. For
     * example, the temperature for 2013-10-01 equal the average temperature
     * for 2010-10-01, 2011-11-01 and 2012-10-01. 
     **********************************************************************/
     
    INSERT INTO city_temp_dim
    (
         city_temp_id, yr_mnth, city_nm, cntry_nm, latitude
        ,longitude, avg_temp, avg_temp_uncertainty
    )
    VALUES(0, 999912, 'Unknown', 'Unknown', '0.0N', '0.0W', 0.0, 0.0)
    ;

    INSERT INTO city_temp_dim
    (
        yr_mnth, city_nm, cntry_nm, latitude, longitude
        , avg_temp, avg_temp_uncertainty
    )
    SELECT TO_CHAR(temp_dt, 'YYYYMM')::INT AS yr_mnth
        , city_nm, cntry_nm, latitude, longitude
        , ROUND(AVG(city_temp.avg_temp), 3) AS avg_temp
        , ROUND(SQRT(SUM(POWER(city_temp.avg_temp_uncertainty,
                                            2))), 3) AS avg_temp_uncertainty
    FROM
    (
        SELECT temp_dt.future_dt as temp_dt, avg_temp, avg_temp_uncertainty
            , city_temp.city_nm, city_temp.cntry_nm AS cntry_nm
            , latitude, longitude
        FROM city_temp_stg city_temp
        INNER JOIN temp_dt_tmp temp_dt
            on temp_dt.historical_dt = city_temp.temp_dt
        WHERE city_temp.cntry_nm = 'United States'
    ) city_temp
    -- only include data from the months in the immigration dataset
    WHERE TO_CHAR(temp_dt, 'YYYYMM')::INT BETWEEN 201601 AND 201612
    GROUP BY 1, 2, 3, 4, 5
    ;
    END TRANSACTION;
""")    


################################################################################
# load airport_dim table using data from airport_stg and state_stg
################################################################################
 
airport_dim_tbl_load = ("""
    BEGIN TRANSACTION;
    DELETE FROM airport_dim;
    
    /***************************************************************************
     * Insert default record; elevation_ft default value is being set to NULL to 
     * consistent with other default value in other records
     **************************************************************************/
     
    INSERT INTO airport_dim
    (
        airport_id, airport_native_id, type_desc, airport_nm, elevation_ft
        , iso_region_cd, municipality, state_cd, state_nm
        , gps_cd, iata_cd, local_cd, longitude, latitude
    )
    VALUES(0, 'None', 'Unknown', 'Unknown', NULL
            , 'Unknown', 'Unknown', '99', 'Not Applicable', 'Unknown', '999'
            , 'Unknown', 0, 0)
    ;

    /***************************************************************************
     * Insert US data removing duplicate iata_codes; include the record with
     * alphabetically highest identification code (ident)
     **************************************************************************/
     
    INSERT INTO airport_dim
    (
         airport_native_id, type_desc, airport_nm, elevation_ft
        , iso_region_cd, municipality, state_cd
        , state_nm, gps_cd, iata_cd, local_cd, longitude, latitude
    )
    SELECT
          ident, type, name, elevation_ft, iso_region
        , INITCAP(TRIM(municipality))
        , COALESCE(airport.state_cd, '99')
        , INITCAP(COALESCE(state.state_nm, 'Not Applicable'))
        , gps_code, iata_code, local_code
        , SPLIT_PART(coordinates, ',', 1)::NUMERIC AS longitude
        , SPLIT_PART(coordinates, ',', 2)::NUMERIC AS latitude 
    FROM
    (
        -- remove duplicates
        SELECT
             ident, type, name, elevation_ft, continent, iso_country, iso_region
            , municipality, gps_code, iata_code, local_code, coordinates
            , SPLIT_PART(iso_region, '-', 2)::TEXT AS state_cd
            , SUM(1) OVER (
                PARTITION BY iata_code
                ORDER BY ident DESC ROWS UNBOUNDED PRECEDING
              ) AS row_nbr
        FROM airport_stg
        WHERE iata_code IS NOT NULL
        AND iso_country = 'US'
        AND NOT ( UPPER(name) LIKE UPPER('%Duplicate%') AND
                        UPPER(name) LIKE UPPER('DELETE') )
    ) airport
    LEFT JOIN state_stg state
        ON state.state_cd = airport.state_cd
    WHERE row_nbr = 1
    ; 
    END TRANSACTION;
""")

################################################################################
# load time_period_dim table using year/month from imgrtn_data_stg
################################################################################

time_period_dim_tbl_load = ("""
    BEGIN TRANSACTION;
    DELETE FROM time_period_dim
    USING
    (
        SELECT ((i94yr::NUMERIC)::INT::CHAR(4) || 
                LPAD((i94mon::NUMERIC)::INT::TEXT, 2, '0'))::INT AS yr_mnth
        FROM imgrtn_data_stg
        GROUP BY 1
    ) time_period
    WHERE time_period_dim.yr_mnth = time_period.yr_mnth;
        
    INSERT INTO time_period_dim(yr_mnth, yr, mnth, mnth_shrt_nm, mnth_lng_nm
                                , yr_mnth_nm, qtr, yr_qtr_nm)
    SELECT
         yr_mnth, yr, mnth
         ,TO_CHAR(TO_DATE(yr_mnth || '01', 'YYYYMMDD'), 'Mon') mnth_shrt_nm
         ,TO_CHAR(TO_DATE(yr_mnth || '01', 'YYYYMMDD'), 'Month') mnth_long_nm
         ,TO_CHAR(TO_DATE(yr_mnth || '01', 'YYYYMMDD'), 'YYYY-Mon') yr_mnth_nm
         ,TO_CHAR(TO_DATE(yr_mnth || '01', 'YYYYMMDD'), 'Q')::INT qtr
         ,TO_CHAR(TO_DATE(yr_mnth || '01', 'YYYYMMDD'), 'YYYY-"Q"Q') yr_qtr_nm
    FROM
    (
        SELECT
             TO_CHAR(TO_DATE(arrvl_dt,'YYYY-MM-DD'),'YYYYMM')::INT AS yr_mnth   
            ,i94yr::INT AS yr
            ,i94mon::INT AS mnth
        FROM imgrtn_data_stg
        GROUP BY 1, 2, 3
    ) time_period
    ;     
    END TRANSACTION;
""")


################################################################################
# load imgrtn_data_fct table using data from imgrtn_data_stg, airport_dim,
# city_demogrphc_dim and city_temp_dim
################################################################################

imgrtn_data_fct_tbl_load = ("""
    CREATE TEMPORARY TABLE imgrtn_data_tmp
    (
         arrvl_yr_mnth INT
        ,ctznshp_cntry_id SMALLINT
        ,resid_cntry_id SMALLINT
        ,port_of_entry_cd CHAR(3)
        ,trans_mode_id SMALLINT
        ,dest_state_cd CHAR(2)
        ,visa_ctgry_id SMALLINT
        ,imgrnt_cnt INT
    )
    ;

    INSERT INTO imgrtn_data_tmp
    (
         arrvl_yr_mnth, ctznshp_cntry_id, resid_cntry_id, port_of_entry_cd, 
         trans_mode_id, dest_state_cd, visa_ctgry_id, imgrnt_cnt
    )
    SELECT 
         arrvl_yr_mnth, ctznshp_cntry_id, resid_cntry_id
         , imgrtn_fct.port_of_entry_cd, trans_mode_id, dest_state_cd
         , visa_ctgry_id, imgrnt_cnt
    FROM
    (
        SELECT
              TO_CHAR(TO_DATE(arrvl_dt ,'YYYY-MM-DD')
                        ,'YYYYMM')::INT AS arrvl_yr_mnth 
            , CASE
                WHEN i94cit::SMALLINT = 353 THEN 311
                WHEN i94cit::SMALLINT = 721 THEN 741
                ELSE i94cit::SMALLINT
              END::NUMERIC::SMALLINT AS ctznshp_cntry_id
              
            , CASE
                WHEN i94res::SMALLINT = 353 THEN 311
                WHEN i94res::SMALLINT = 721 THEN 741
                ELSE i94res::SMALLINT
              END::NUMERIC::INT AS resid_cntry_id
             ,CASE
                WHEN i94port = 'FRG' THEN 'FOK'
                WHEN i94port = 'HRL' THEN 'HLG'
                WHEN i94port = 'ISP' THEN 'FOK'
                WHEN i94port = 'JSJ' THEN 'SAJ'
                WHEN i94port = 'BUS' THEN 'BUF'
                WHEN i94port = 'IAG' THEN 'NIA'
                WHEN i94port = 'PHN' THEN 'PHU'
                WHEN i94port = 'STN' THEN 'STR'
                WHEN i94port = 'VMB' THEN 'VNB'
                WHEN i94port = 'T01' THEN 'SEA'
                ELSE i94port
              END AS port_of_entry_cd
              
              --i94mode 9 = 'Not reported'
            , COALESCE(i94mode::SMALLINT, 9) AS trans_mode_id
            , COALESCE(us_state.state_cd, '99') dest_state_cd
            , i94visa::SMALLINT AS visa_ctgry_id
            , SUM(count::INT) AS imgrnt_cnt
        FROM imgrtn_data_stg imgrtn_data
        LEFT JOIN state_stg us_state
            ON us_state.state_cd = COALESCE(imgrtn_data.i94addr, 'NULL')
        GROUP by 1, 2, 3, 4, 5, 6, 7
    ) imgrtn_fct
    INNER JOIN port_of_entry_dim port
        ON port.port_of_entry_cd = imgrtn_fct.port_of_entry_cd
    WHERE port.cntry_nm = 'United States'
    ;

    /***************************************************************************
     * Include the airport ID; assign the default value of zero when no
     * corresponding airport iata_code is found matching the port of entry code,
     * for transportation mode "Air".
     **************************************************************************/

    CREATE TEMPORARY TABLE imgrtn_arprt_tmp AS
    (
        SELECT COALESCE(airport.airport_id, 0) AS airport_id
            , imgrtn.*
        FROM imgrtn_data_tmp imgrtn
        LEFT JOIN trans_mode_dim trans_mode
            ON trans_mode.trans_mode_id = imgrtn.trans_mode_id
            AND trans_mode.trans_mode_nm = 'Air'
        LEFT JOIN airport_dim airport
            ON imgrtn.port_of_entry_cd = COALESCE(airport.iata_cd, 'NULL')
    ) 
    ;

    /***************************************************************************
     * Create a small port of entry code table including the information need
     * to integrate the US city demographics and city temperature datasets. The
     * immigration count is include to check data while developing the code.
     **************************************************************************/
    CREATE TEMPORARY TABLE imgrtn_arprt_fk_tmp AS
    (
        SELECT
              arrvl_yr_mnth
            , airport_id
        FROM imgrtn_arprt_tmp imgrtn
        GROUP BY 1, 2
    ) 
    ;

    /***************************************************************************
     * Below update statement states are not being using, because of their slow
     * running time. The airport city, state or country & longitude are used to
     * lookup the city demographic and temp IDs.
     **************************************************************************/
     
    /***************************************************************************
     * Lookup the US city demographics ID for the airport; assign the default
     * value of zero when no corresponding city, state demographics is not found.
     **************************************************************************/

    CREATE TEMPORARY TABLE arprt_cty_demogrphc_tmp AS
    (
        SELECT 
              imgrtn_arprt.airport_id
            , COALESCE(demogrphc.city_demogrphc_id, 0) AS city_demogrphc_id
        FROM imgrtn_arprt_fk_tmp imgrtn_arprt
        INNER JOIN airport_dim airport
            ON airport.airport_id = imgrtn_arprt.airport_id
        LEFT JOIN city_demogrphc_dim demogrphc
            ON demogrphc.city_nm = COALESCE(airport.municipality, 'NULL')
            AND demogrphc.state_nm = COALESCE(airport.state_nm, 'NULL')
        GROUP BY 1, 2
    );

    /***************************************************************************
     * A country can have more than one city with the same name. Thus, the
     * longitude is being used to reduce the possible of associating the
     * incorrect temperature to the airport city.
     *
     * Now let's find the city with a unique rounded longitude. The longitude is
     * being rounded, because the geography coordinates data in the airport and
     * temperature dataset do not match. In fact, the temperature longitude is
     * given East/West characters (4.5W) while the airport data uses a decimal
     * value (4.43). The is guarantee that both measured the same location.
     **************************************************************************/
     
    CREATE TEMPORARY TABLE city_temp_unq_key_tmp AS
    (
        -- identify month, city, country, longitude combination that are not
        -- duplicates
        SELECT city_temp.yr_mnth, city_temp.city_nm, city_temp.cntry_nm
            , ROUND(airport.longitude) AS lng_rounded
        FROM city_temp_dim city_temp
        INNER JOIN
        (
            SELECT arrvl_yr_mnth
            FROM imgrtn_arprt_fk_tmp
            GROUP BY 1
        ) mnth
            ON mnth.arrvl_yr_mnth = city_temp.yr_mnth
        INNER JOIN airport_dim airport
            ON COALESCE(airport.municipality, 'NULL') = city_temp.city_nm
            AND city_temp.cntry_nm = 'United States'
            AND ROUND(airport.longitude) =
                CASE
                    WHEN SUBSTRING(city_temp.longitude,
                        CHAR_LENGTH(city_temp.longitude), 1) = 'W' 
                        
                    THEN ROUND(SUBSTRING(city_temp.longitude,
                        1, CHAR_LENGTH(city_temp.longitude) -1)::NUMERIC) * -1
                        
                    ELSE ROUND(SUBSTRING(city_temp.longitude,
                        1, CHAR_LENGTH(city_temp.longitude) -1)::NUMERIC)
                END
        GROUP BY 1, 2, 3, 4
        HAVING COUNT(*) = 1 
    ) 
    ;

    /***************************************************************************
     *
     **************************************************************************/
    CREATE TEMPORARY TABLE arprt_cty_temp_tmp AS
    (
        SELECT arrvl_yr_mnth, arprt.airport_id, city_temp.city_temp_id
        FROM imgrtn_arprt_fk_tmp arprt
        INNER JOIN airport_dim airport
            ON airport.airport_id = arprt.airport_id
        INNER JOIN
        (
            SELECT
                city_temp.city_temp_id, city_temp.yr_mnth
                , city_temp.city_nm, city_temp.cntry_nm
                , city_temp_unq_key_tmp.lng_rounded
            FROM city_temp_dim city_temp
            INNER JOIN city_temp_unq_key_tmp
                ON city_temp_unq_key_tmp.yr_mnth = city_temp.yr_mnth
                AND city_temp_unq_key_tmp.city_nm = city_temp.city_nm
                AND city_temp_unq_key_tmp.cntry_nm = city_temp.cntry_nm
                AND city_temp_unq_key_tmp.lng_rounded =
                    CASE
                        WHEN SUBSTRING(city_temp.longitude,
                            CHAR_LENGTH(city_temp.longitude), 1) = 'W'
                            
                        THEN ROUND(SUBSTRING(city_temp.longitude,
                            1, CHAR_LENGTH(city_temp.longitude) -1)::NUMERIC) * -1
                            
                        ELSE ROUND(SUBSTRING(city_temp.longitude,
                            1, CHAR_LENGTH(city_temp.longitude) -1)::NUMERIC)
                    END
            GROUP BY 1, 2, 3, 4, 5
        ) city_temp
            ON COALESCE(airport.municipality, 'NULL') = city_temp.city_nm
            AND city_temp.cntry_nm = 'United States'
            AND city_temp.lng_rounded = ROUND(airport.longitude)
            AND arprt.arrvl_yr_mnth = city_temp.yr_mnth
        GROUP BY 1, 2, 3
     )       
    ;

    /***************************************************************************
     * load immigration fact table
     **************************************************************************/
    BEGIN TRANSACTION;
    
    DELETE FROM imgrtn_data_fct
    WHERE arrvl_yr_mnth IN
    (
        SELECT arrvl_yr_mnth  FROM imgrtn_arprt_tmp GROUP BY 1
    );
    
    INSERT INTO imgrtn_data_fct
    (
         arrvl_yr_mnth
        ,ctznshp_cntry_id
        ,resid_cntry_id
        ,port_of_entry_cd
        ,trans_mode_id
        ,dest_state_cd
        ,visa_ctgry_id
        ,airport_id
        ,city_demogrphc_id
        ,city_temp_id
        ,imgrnt_cnt
    )
    SELECT
         imgrtn_arprt.arrvl_yr_mnth
        ,imgrtn_arprt.ctznshp_cntry_id
        ,imgrtn_arprt.resid_cntry_id
        ,imgrtn_arprt.port_of_entry_cd
        ,imgrtn_arprt.trans_mode_id
        ,imgrtn_arprt.dest_state_cd
        ,imgrtn_arprt.visa_ctgry_id
        ,imgrtn_arprt.airport_id
        ,cty_demogrphc.city_demogrphc_id
        ,COALESCE(cty_temp.city_temp_id, 0)
        ,imgrtn_arprt.imgrnt_cnt
    FROM imgrtn_arprt_tmp imgrtn_arprt
    INNER JOIN arprt_cty_demogrphc_tmp cty_demogrphc
        ON cty_demogrphc.airport_id = imgrtn_arprt.airport_id
    LEFT JOIN arprt_cty_temp_tmp cty_temp
        ON cty_temp.airport_id = imgrtn_arprt.airport_id
        AND cty_temp.arrvl_yr_mnth = imgrtn_arprt.arrvl_yr_mnth;
        
    END TRANSACTION;
""")


################################################################################
# Compose data quality queries
################################################################################

imgrtn_total = ("""
    SELECT SUM(imgrnt_cnt) FROM imgrtn_data_fct;
""")

imgrtn_airport_total = ("""
    SELECT SUM(imgrnt_cnt)
    FROM imgrtn_data_fct fct
    INNER JOIN airport_dim dim
        on dim.airport_id = fct.airport_id;
""")

imgrtn_tm_period_total = ("""
    SELECT SUM(imgrnt_cnt)
    FROM imgrtn_data_fct fct
    INNER JOIN time_period_dim dim
        on dim.yr_mnth = fct.arrvl_yr_mnth;
""")

imgrtn_port_of_entry_total = ("""
    SELECT SUM(imgrnt_cnt)
    FROM imgrtn_data_fct fct
    INNER JOIN port_of_entry_dim dim
        on dim.port_of_entry_cd = fct.port_of_entry_cd;
""")

imgrtn_trans_mode_total = ("""  
    SELECT SUM(imgrnt_cnt)
    FROM imgrtn_data_fct fct
    INNER JOIN trans_mode_dim dim
        on dim.trans_mode_id = fct.trans_mode_id;
""")
   
imgrtn_visa_ctgry_total = ("""  
    SELECT SUM(imgrnt_cnt)
    FROM imgrtn_data_fct fct
    INNER JOIN state_dim dim
        on dim.state_cd = fct.dest_state_cd;
""")

imgrtn_state_total = ("""  
    SELECT SUM(imgrnt_cnt)
    FROM imgrtn_data_fct fct
    INNER JOIN visa_ctgry_dim dim
        on dim.visa_ctgry_id = fct.visa_ctgry_id;
""")

imgrtn_city_demogrphc_total = ("""    
    SELECT SUM(imgrnt_cnt)
    FROM imgrtn_data_fct fct
    INNER JOIN city_demogrphc_dim dim
        on dim.city_demogrphc_id = fct.city_demogrphc_id;
""")

imgrtn_city_temp_total = ("""  
    SELECT SUM(imgrnt_cnt)
    FROM imgrtn_data_fct fct
    INNER JOIN city_temp_dim dim
        on dim.city_temp_id = fct.city_temp_id;
""")        

       
################################################################################
# create dictionaries referenced in code used to drop, create, load and check
# target tables data quality
################################################################################

drop_tbl_qry = { 
    'port_of_entry_stg': port_of_entry_stg_tbl_drop
    , 'trans_mode_stg': trans_mode_stg_tbl_drop
    , 'visa_ctgry_stg': visa_ctgry_stg_tbl_drop
    , 'cntry_stg': cntry_stg_tbl_drop
    , 'city_demogrphc_stg': city_demogrphc_stg_tbl_drop
    , 'state_stg': state_stg_tbl_drop
    , 'city_temp_stg': city_temp_stg_tbl_drop
    , 'airport_stg': airport_stg_tbl_drop
    , 'imgrtn_data_stg': imgrtn_data_stg_tbl_drop
    , 'port_of_entry_dim': port_of_entry_dim_tbl_drop
    , 'trans_mode_dim': trans_mode_dim_tbl_drop
    , 'visa_ctgry_dim': visa_ctgry_dim_tbl_drop
    , 'cntry_dim': cntry_dim_tbl_drop
    , 'city_demogrphc_dim': city_demogrphc_dim_tbl_drop
    , 'state_dim': state_dim_tbl_drop
    , 'city_temp_dim': city_temp_dim_tbl_drop
    , 'airport_dim': airport_dim_tbl_drop
    , 'imgrtn_data_fct': imgrtn_data_fct_tbl_drop
}

create_tbl_qry = {
      'city_demogrphc_stg': city_demogrphc_stg_tbl_create
    , 'port_of_entry_stg': port_of_entry_stg_tbl_create
    , 'trans_mode_stg': trans_mode_stg_tbl_create
    , 'visa_ctgry_stg': visa_ctgry_stg_tbl_create
    , 'cntry_stg': cntry_stg_tbl_create
    , 'state_stg': state_stg_tbl_create
    , 'city_temp_stg': city_temp_stg_tbl_create
    , 'airport_stg': airport_stg_tbl_create
    , 'imgrtn_data_stg': imgrtn_data_stg_tbl_create
    , 'city_demogrphc_dim': city_demogrphc_dim_tbl_create
    , 'port_of_entry_dim': port_of_entry_dim_tbl_create
    , 'trans_mode_dim': trans_mode_dim_tbl_create
    , 'visa_ctgry_dim': visa_ctgry_dim_tbl_create
    , 'cntry_dim': cntry_dim_tbl_create
    , 'state_dim': state_dim_tbl_create
    , 'city_temp_dim': city_temp_dim_tbl_create
    , 'airport_dim': airport_dim_tbl_create
    , 'time_period_dim': time_period_dim_tbl_create
    , 'imgrtn_data_fct': imgrtn_data_fct_tbl_create
}

load_stg_tbl_qry = {
    'cntry_stg': cntry_stg_copy
    , 'port_of_entry_stg': port_of_entry_stg_copy
    , 'state_stg': state_stg_copy
    , 'trans_mode_stg': trans_mode_stg_copy
    , 'visa_ctgry_stg': visa_ctgry_stg_copy
    , 'city_demogrphc_stg': city_demogrphc_stg_copy
    , 'city_temp_stg': city_temp_stg_copy
    , 'airport_stg': airport_stg_copy
    , 'imgrtn_data_stg': imgrtn_data_stg_copy
} 
 
load_tgt_tbl_qry = {
    'trans_mode_dim': trans_mode_dim_tbl_load
    , 'visa_ctgry_dim': visa_ctgry_dim_tbl_load
    , 'cntry_dim': cntry_dim_tbl_load
    , 'state_dim': state_dim_tbl_load
    , 'port_of_entry_dim': port_of_entry_dim_tbl_load
    , 'city_demogrphc_dim': city_demogrphc_dim_tbl_load
    , 'city_temp_dim': city_temp_dim_tbl_load
    , 'airport_dim': airport_dim_tbl_load
    , 'time_period_dim': time_period_dim_tbl_load
    , 'imgrtn_data_fct': imgrtn_data_fct_tbl_load
}

data_quality_qry = {
      'imgrtn_total': imgrtn_total
    , 'imgrtn_airport_total': imgrtn_airport_total
    , 'imgrtn_tm_period_total': imgrtn_tm_period_total
    , 'imgrtn_port_of_entry_total': imgrtn_port_of_entry_total
    , 'imgrtn_trans_mode_total': imgrtn_trans_mode_total
    , 'imgrtn_visa_ctgry_total': imgrtn_visa_ctgry_total
    , 'imgrtn_state_total': imgrtn_state_total
    , 'imgrtn_city_demogrphc_total': imgrtn_city_demogrphc_total
    , 'imgrtn_city_temp_total': imgrtn_city_temp_total
}





                       
